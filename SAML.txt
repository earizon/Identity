## SAML Federated Identity
REF: <http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html>
* SAML stands for Security Assertion Markup Language, based on an 
  XML-based framework for describing and exchanging security information
  between on-line partners. 
  * security information is expressed in the form of portable SAML assertions
* Use cases:
  * Web Single Sign-On
  * Identity Federation
  * WS-Security
* SAML compares to OAuth2/OpenID
* SAML defines resource access based on the identity of user/device/service
* Individual Companies manage their own user identity stores, but share an
  amount of required security verification data via a SAML token.
* SAML 2 is designed to be used by other standards.
* Versions:
  * SAML 1.0
  * SAML 1.1
  * SAML 2.0
* It is beeing "replaced" (Not actually) by OAuth/OpenID when scaling
  Identity Providers and federated identities from Companies Networks to 
  the Internet Network, where Google, Facebook... become the
  "super-identity providers".
* When compared to OAuth/OpenID, SAML has a lower ecosystems in terms
  development/integration libraries and tools. XML is (much) harder to
  work with than standard formats in OAuth (JSON/JWT).

* SAML protocol requires information to be exchanged between identity provider 
   (eg.Azure AD) and the service provider (the application).
  ```
  | Azure AD    == asserting (issuing) party
  | Application == relying (verifier) party
  ```

## TRUST PRE-SETUP

* ```
  |           Similar role than      [[{doc_has.comparative}]]
  |           OAuth2  Provider ("OP")
  | │Identity│<·┘ 
  | │Provider│<············· Authenticates Against <···
  |   ^  ·                                            ·
  |   ·  ·                                            ·
  |   ·  ·                                        │User│
  |   ·  ·                                            ·
  |   ·  ·                                            ·
  |   ·  ···> Setups Trust¹·> │Service │<·· Access ····
  |   ·       relationship    │Provider│    services
  |   ·                          ·          from
  |   ·                          ·
  |   ····· Delegates <·········─┘
  |         User's Authentication to
  ```
* ¹ Trust relationship setup is done by App developer with initial access to identity
  provider by registering the |Service Provider| required info in the IdP. In
  particular registering:
  * Redirect URI
  * Metadata URI used by IdP to retrieve the signing key and loguout URI of (cloud) service
    Metadata defines a way to express and share configuration 
    information between SAML parties. For instance, an entity's supported 
    SAML bindings, operational roles (IDP, SP, etc), identifier 
    information, supporting identity attributes, and key information for 
    encryption and signing can be expressed using SAML metadata XML 
    documents with a well defined XML schema. 

* Example Single sign-on/out endpoints in Azure AD:
  <https://login.microsoftonline.com/${TenantDomainName}/FederationMetadata/2007-06/FederationMetadata.xml>


* SAML roles:
  * ... For example, to support Multi-Domain Single Sign-On (MDSSO or 
    SSO for short) SAML defines the roles:
    * identity provider (IdP) 
    * service provider (SP)
  *  attribute authority: entity producing assertions in response to
     identity attribute queries from an entity acting as  ...
  * attribute requester:

* Summarized SAML2 flow:
  ```
  webSP ··> IdP: SAML-Request01
  IdP ··> webSP: SAML-Response01
  ```
* SAML2 detailed flow. Messages travel through user-agent
  (web browser) that has the possibility to store and reuse
  SAML-Response01 in different sites (Multi Domain single sign-on)
  ```
  browser -> webSP: visit 
  webSP  -> browser: SAML-Request01
  browser -> IdP:  SAML-Request01
  IdP -> IdP: Validates SAML-Request01 (signature, ...)=
  IdP -> browser: User/Pass, 2FA, ... or another "challenge"
  browser -> IdP: user/pass, ... (other device can be needed)
  UdP -> browser: Signed SAML-Response01 with Assertions
  browser -> webSP:  SAML-Response01
  webSP -> webSP: validates SAML-Response01
  ```

## SAML Assertion
* SAML Assertion == **statements** about a **subject**.
  three kinds of statements that can be carried:
  * Authentication statements: At a minimum, they describe the particular means used 
    to authenticate the user and the specific time at which the authentication took place.
  * Attribute statements: These contain specific identifying attributes about the subject
    (for example, that user “John Doe” has “Gold” card status).
  * Authorization decision statements: These define something that the subject is entitled
    to do (for example, whether “John Doe” is permitted to buy a specified item).

* A SAML Assertion may contain 1+ `SubjectConfirmation` elements that
  "In practical terms" says is "these are the conditions under which 
  an attesting entity (somebody trying to use the assertion) is
  permitted to do so. If more that one element is presnet the attesting
  entity only has to satisfy one of them.
  * SAML 2.0 accounts for three different security scenarios with
    three values for the Method attribute of the SubjectConformation element:
    * urn:oasis:names:tc:SAML:2.0:cm:holder-of-key
      Party must probe ownership of key by "signing" with it.
    * urn:oasis:names:tc:SAML:2.0:cm:bearer
      Party must bear the Assertion.
    * urn:oasis:names:tc:SAML:2.0:cm:sender-vouches
      Party should use other criteria 


# SAML (request/response) Protocols

* Authentication Request Protocol:
* Single Logout Protocol
* Assertion Query and Request Protocol: Defines a set of queries by which SAML
  assertions may be obtained. The Request form of this protocol can ask an
  asserting party for an existing assertion by referring to its assertion ID. 
  The Query form of this protocol defines how a relying party can ask for
  assertions (new or existing) on the basis of a specific subject and the 
  desired statement type.
* Artifact Resolution Protocol: Provides a mechanism by which SAML protocol
  messages may be passed by reference using a small, fixed-length value called
  an artifact. 
* Name Identifier Management Protocol: Provides mechanisms to change the
  value or format of the name identifier used to refer to a principal.
* Name Identifier Mapping Protocol: Provides a mechanism to 
  programmatically map one SAML name identifier into another, subject 
  to appropriate policy controls. 

# SAML Bindings:

* HTTP Redirect Binding: 302 status code responses.
* HTTP POST Binding: base64-encoded content of an HTML form control.
* HTTP Artifact Binding: Defines how an artifact is transported from 
       a message sender to a message receiver using HTTP. 
       Two mechanisms are provided: 
       * HTML form control 
       * query string in the URL.
* SAML SOAP Binding: SOAP 1.1 messages.
* Reverse SOAP (PAOS) Binding: multi-stage SOAP/HTTP message exchange that 
  permits an HTTP client to be a SOAP responder. Used in the 
  Enhanced Client and Proxy Profile to enable clients and proxies 
  capable of assisting in IDP discovery.
* SAML URI Binding: Defines a means for retrieving an existing SAML assertion 
  by resolving a URI (uniform resource identifier).

# Profiles: "SAML" subsets of assertions, protocols and bindings for 
  different use case.

* Web Browser SSO Profile:
* Enhanced Client and Proxy (ECP) Profile. 
* ...

## Assertion, Subject and Statement Structure Rules
* `<NameID>` within <Subject> can be provided in different formats:
  * Email address
  * X.509 subject name
  * Windows domain qualified name
  * Kerberos principal name
  * Entity identifier
  * Persistent identifier
  * Transient identifier
* SAML's attribute structure does not presume that any particular 
  type of data store or data types are being used for the attributes; 
  it has an attribute type-agnostic structure
* ...
  
# Privacy Protection

SAML mechanisms include:
* pseudonyms established between the IdP and the SP.
* One-time or transient identifiers.
* SAML's Authentication Context allows a user to be authenticated
  at a a sufficient (but not more than necessary) assurance level.
* SAML allows the claimed fact of a user consenting to certain
  operations. 

# Establishing and Managing Federated Identities

Use case include:

The following use cases are described:

* Federation via Out-of-Band Account Linking between federated identities for users and
  local user identities.
* Federation via Persistent Pseudonym Identifiers: IdP federates the user's local
  identity principal with the principal's identity at the SP using a persistent SAML
  name identifier.
* Federation via Transient Pseudonym Identifiers: A temporary identifier is used to
  federate between the IdP and the SP for the life of the user's web SSO session.
* Federation via Identity Attributes: Attributes of the principal, as defined by the
  identity provider, are used to link to the account used at the service provider.
* Federation Termination: termination of an existing federation

