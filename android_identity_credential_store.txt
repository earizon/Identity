# Android Identity Credential Store  [[{mobile.android,security.secret_mng]]
* <https://github.com/google/identity-credential>
  This repository contains libraries and applications related to the 
  Android Identity Credential API provided in the Android Framework as 
  of Android 11 as well as ISO/IEC 18013-5:2021 and related standards.

* Android Identity Credential Library
This library has two goals. The first goal is to provide a 
compatibility-layer for the Android Identity Credential API when 
running on a device where this API is not implemented (for example, a 
device running an older Android version). This is achieved by using 
Android Keystore APIs when the hardware-backed Identity Credential 
APIs are not available.

The other goal of the library is to provide high-level primitives 
that any mdoc or mdoc reader application is anticipated to need.

## IdentityCredentialStore
https://developer.android.com/reference/android/security/identity/IdentityCredentialStore

public abstract class IdentityCredentialStore
extends Object

An interface to a secure store for user identity documents.

This interface is deliberately fairly general and abstract. To the
extent possible, specification of the message formats and semantics
of communication with credential verification devices and issuing
authorities (IAs) is out of scope. It provides the interface with
secure storage but a credential-specific Android application will be
required to implement the presentation and verification protocols and
processes appropriate for the specific credential type.

Multiple credentials can be created. Each credential comprises:

A document type, which is a string.
  A set of namespaces, which serve to disambiguate value names. It is recommended that namespaces be structured as reverse domain names so that IANA effectively serves as the namespace registrar.

  For each namespace, a set of name/value pairs, each with an
associated set of access control profile IDs. Names are strings and
values are typed and can be any value supported by CBOR.

  A set of access control profiles (up to 32), each with a profile ID
and a specification of the conditions which satisfy the profile's
requirements.

  An asymmetric key pair which is used to authenticate the credential
to the Issuing Authority, called the CredentialKey.

  A set of zero or more named reader authentication public keys,
which are used to authenticate an authorized reader to the credential.

  A set of named signing keys, which are used to sign collections of
values and session transcripts.

  Implementing support for user identity documents in secure storage
requires dedicated hardware-backed support and may not always be
available.

  Two different credential stores exist - the default store and the
direct access store. Most often credentials will be accessed through
the default store but that requires that the Android device be
powered up and fully functional. It is desirable to allow identity
credential usage when the Android device's battery is too low to boot
the Android operating system, so direct access to the secure hardware
via NFC may allow data retrieval, if the secure hardware chooses to
implement it.

  Credentials provisioned to the direct access store should always
use reader authentication to protect data elements. The reason for
this is user authentication or user approval of data release is not
possible when the device is off.

  The Identity Credential API is designed to be able to evolve and
change over time but still provide 100% backwards compatibility. This
is complicated by the fact that there may be a version skew between
the API used by the application and the version implemented in secure
hardware. To solve this problem, the API provides for a way for the
application to query which feature version the hardware implements
(if any at all) using android.content.pm and android.content.pm.
Methods which only work on certain feature versions are clearly
documented as such.
[[mobile.android}]]
