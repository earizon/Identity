# JSON Web Tokens
## JSON Web Signature  (JWS) (RFC 7515) <!-- { -->
* REF: <https://tools.ietf.org/html/rfc7515>
* JWS represents content secured with digital
  signatures or Message Authentication Codes (MACs) using JSON-based
  data structures.<br/>
   Related cryptographic algorithms and identifiers are described
  in the JSON Web Algorithms (JWA) spec. 
* JWT (JWS) structure:
  ```
  | xxxxx.yyyyyyyyyyyyyyyyyyy.zzzzz ← Base64URL encoded
  | ^     ^                   ^     ↖
  | │  ┌──┘                   │      ☞ format more compact when compared to
  | │  │  ┌───────────────────┘        XML-based standards such as SAML.
  | │  │  │
  | │  │  SIGNATURE
  | │  │             └ (with shared_secret or priv.key)
  | │  │               (Using signature algorithm of HEADER)
  | │  PAYLOAD
  | │  - claims about an entity + additional data.
  | │
  | │  - types of claims
  | │    - registered : non mandatory but recommended for interoperability:
  | │      (mandatory 
  | │       "jti" (JWT ID) Claim
  | │       "iss" (issuer)
  | │       "exp" (expiration time)
  | │       "iat" (Issued At)
  | │       "sub" (subject)
  | │       "aud" (aud)ience of the token, i.e., the "web app" that is meant to
  | │             be the final recipient of the token. eg.: In the case of an
  | │             ID token, its value is the client ID of the application that
  | │             should consume the token.
  | │       "nbf" (Not Before)
  | │
  | │
  | │    - public     : Defined at will. To avoid collisions they should be defined
  | │                   in the IANA JSON Web Token Registry or be defined as a URI
  | │                   that contains a collision resistant namespace.
  | │
  | │    - private    : custom claims between parties
  | │
  | HEADER typically consists of:
  | {
  |   "alg": "HS256", ← signing algorithm used (HMAC SHA256, RSA, ECDSA...)
  |   "typ": "JWT"    ← type of tokern (JWT)
  | }
  ```

* A common JWT ussage pattern involves client sending the JWT in the
  HTTP Authorization header using the Bearer-schema:
  ```
  Authorization: Bearer <token>
  ( Stateless authorization )
  ```

* KEY-POINT: By sending in the Authorization header, Cross-Origin Resource Sharing
  (CORS) won't be an issue as it doesn't use cookies.

[[{02_doc_has.comparative]]
* Signing XML with XML Digital Signature is very complex and
  error prone when compared to the simplicity of signing JSON.
[[}]]
<!-- } -->

## JWT (RFC 7519) <!-- { -->
* <https://tools.ietf.org/html/rfc7519> 
* specification for compact, **URL-SAFE** means of REPRESENTING
  CLAIMS TO BE TRANSFERRED BETWEEN TWO PARTIES, commonly used 
  to representing OAuth 2.0 authentication tokens ("access_token")
  and OpenID Connect Identity tokens ("id_token").<br/>

* In practice: A JWT is a JWS structure with a JSON object as the payload.
  and some optional predefined claims (JSON keys) such as iss, aud, exp, ...
* claims are encoded as a JSON object used as:
  * the payload of a JSON Web Signature (JWS) structure
    enabling the claims to be digitally signed using either:
    * symetric shared secrets (HMAC)
    * asymetrict key pairs RSA/ECDSA.
  * the plaintext of a JSON Web Encryption (JWE) structure.
    enabling the claims to be integrity protected with a
    Message Authentication Code (MAC) and/or encrypted.

## JWT Best Patterns [[{qa.101]]
* <https://www.ietf.org/rfc/rfc8725.html>
* Best patterns for JWT (and underlying JWS, jWE and JWA).
  (considered "floor", not "ceiling").
* Perform Algorithm Verification. Library MUST ensure that
  "alg" and/or "enc" headers specifies the same algorithm used
  for the cryptographic operation. 
* EACH KEY MUST BE USED WITH EXACTLY ONE ALGORITHM:
  and this MUST be checked when the cryptographic operation 
  is performed.
* Use and Validate Audience:
* Issuers issuing JWT for different applications/relying
  parties, must include the "aud" (audience) claim and
  applications/relying parties validating the incomming
  JWT MUST validate such audience value.
* Do Not Trust Received Claims:
  * Ensure that the "kid" (key ID) header is used only
    to perform key lookup. In particular ensure that it 
    does NOT create SQL or LDAP injection vulnerabilities
    by validating and/or sanitizing the received value.
  * Similarly, blindly following a "jku" (JWK set URL) or
    "x5u" (X.509 URL) header, which may contain an arbitrary
    URL, could result in server-side request forgery (SSRF)
    attacks. A pre-configured "allowed URL list" must be used.
* Use Explicit Typing for JWT instances. For instance, 
  Security Event Tokens (RFC8417) will use 
  "application/secevent+jwt" for the media type and
  "secevent+jwt" for the for the "typ" value.
* Use Mutually Exclusive Validation Rules for Different Kinds of JWTs
  (required and optional claims)
* To prevent substitution of JWTs from one context into another,
  application developers may employ a number of strategies:
  * Use explicit typing for different kinds of JWTs.
  * Use different sets of required claims or different required
    claim values. 
  * Use different sets of required Header Parameters or different
    required Header Parameter values.
  * Use different keys for different kinds of JWTs.
  * Use different "aud" values for different uses of JWTs.
  * Use different issuers for different kinds of JWTs.

### OAuth/OpenID-Connect related JWT Best-Patterns
* OpenID-Connect compliant web-apps will go through the
  `/oauth/authorize` endpoint using the authorization code flow.
* Secret information use JWE.
* Do not store JWT inside localStorage or session storage in
  web browsers ("user-agents" using OAuth nomenclature) since 
  it's accessible by any script (XSS attack/compromised page).
  Preffer `httpOnly` cookies stores: Cookies only sent in
  HTTP requests back to the server and never accessible to JS.
* Don't use JWT as Sessions since it's error prone.
* In the context of OAuth (see next), the JWT is ussually 
  encode as ¹: [[{doc_has.key_point}]]
  * query URI parameter (params after '?'). Example:
    ```
    | https://...?access_token=${JWT_ACCESS_TOKEN}
                  └──────────┴─ JWT token type
    ```
  * fragment component. Example:
    ```
    | https://...#access_token=${JWT}
                  └──────────┴─ JWT token type
    ```
  * form post. Example:
    ```
    | POST /resource HTTP/1.1
    | Host: server.example.com
    | Content-Type: application/x-www-form-urlencoded
    |
    | access_token=${JWT_ACCESS_TOKEN}
    ```
  * Bearer token in authorization Header
    (just for the broadly used JWT access_token vs any other
     JWT representing claims, ...)
    ```
    | Authorization: Bearer ${JWT_ACCESS_TOKEN}
  ¹ Remember: JWT has been designed to be URL-safe 
    ```
[[qa.101}]]

## Command line JWT "juggling":

* REF: <https://github.com/tldr-pages/tldr/blob/master/pages/common/jwt.md>
  ```
  | $ jwt decode {{jwt_string}}       ←  Decode a JWT.
  |                                      -j to decode as JSON string
  |
  | $ jwt encode --alg {{HS256}} \   ← Encode a JSON string → JWT
  |  --secret {{1234567890}}     \
  |  '{{json_string}}'
  |
  | $ jwt encode --alg {{HS256}} \   ← Encode key pair payload to JWT
  |   --secret {{1234567890}}    \
  |  -P key=value
  ```
<!-- } -->

## JSON Web Encryption (JWE RFC 7516) <!-- { -->
* REF: <https://tools.ietf.org/html/rfc7516>
* Spec for JSON objects representin encrypted content.
  Related digital signature and Message Authentication Code (MAC)
  capabilities are described in the separate JSON Web Signature(JWS)
  specification.
* In addition to JWS Header.Payload.Signature format, we have a
  5 fileds `Header.Key.Vector.Payload.Tag`, defined in "7.1. JWE Compact Serialization"
  in RFC 7516, JSON Web Encryption (JWE).
  ```
  BASE64URL(UTF8(JWE Protected Header)) || '.' ||
  BASE64URL(JWE Encrypted Key)          || '.' || ¹
  BASE64URL(JWE Initialization Vector)  || '.' ||
  BASE64URL(JWE Ciphertext)             || '.' || ²
  BASE64URL(JWE Authentication Tag)
  ```
  Used to encrypt (ID and others) tokens.

  ¹ In general encryption is two step process:
    STEP 1) Encrypt data using a shared symmetric key.
    STEP 2) Encrypt symmetric key using a public (asymmetric) key.

  ² JWE RFC 7516 says that any data can be used as the input.
    However, in the context of ID Token, the data has to be a JWS.
    That is, a JWS is nested in a JWE.

* Example JWE:
  ```
  | eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.                    <·· {"alg":"RSA-OAEP","enc":"A256GCM"}
  | OKOawDo13gRp2ojaHV7LFpZcgV7T6DVZKTyKOMTYUmKoTCVJRgckCL9kiMT03JGe   <·· Binary Encrypted Key
  | ipsEdY3mx_etLbbWSrFr05kLzcSr4qKAq7YN7e9jwQRb23nfa6c9d-StnImGyFDb   
  | Sv04uVuxIp5Zms1gNxKKK2Da14B8S4rzVRltdYwam_lDp5XnZAYpQdb76FdIKLaV
  | mqgfwX7XWRxv2322i-vDxRfqNzo_tETKzpVLzfiwQyeyPGLBIO56YJ7eObdv0je8
  | 1860ppamavo35UgoRdbYaBcoh9QcfylQr66oc6vFWXRcZ_ZT2LawVCWTIy3brGPi
  | 6UklfCpIMfIjf7iGdXKHzg.
  | 48V1_ALb6US04U3b.                                                  <·· Binary IV
  | 5eym8TW_c8SuK0ltJ3rpYIzOeDQz7TALvtu6UG9oMo4vpzs9tX_EFShS8iB7j6ji   <·· Binary Chipertext
  | SdiwkIr3ajwQzaBtQD_A.                                        
  | XFBoMYUZodetZdvTiFvSkQ                                             <·· Binary JWE Authentication Tag
  ```
<!-- } -->

## JSON Web Key (JWK) [[{standards.JWK,security.secret_mng]]
* JWKs and JWK Sets are used in the JSON Web Signature [JWS] and JSON 
  Web Encryption [JWE] specifications.
* REF: <https://tools.ietf.org/html/rfc7517>
* Spec for a JSON data structure representing a cryptographic key or 
  cryptographic key set (JWK Set).
* Status: Internet Standards Track document.
* Example JWK
  ```
  | (values are case-sensitive)
  | { 
  |                        // Common key params
  |   "kid":"...."       <·· OPT: Unique  (in-JWT Set) key ID, used to
  |                          match a specific key, used for example in
  |                          JWK Sets key rollovers.
  |                          Structure is unspecified, but it is RECOMMENDED
  |                          not to exceed 8 chars without a compelling reason.
  |                          For  the purposes of matching "kty" values, "*"
  |                          matches all values.
  |                          e.g:In JWS&JWE it is used to match JWS/JWE with
  |                          Header Parameter value.
  |  during key rollover.  
  |   "kty":"EC",        <·· key type: (RSA|EC|...) ¹
  |   "use":"sig"        <·· OPT.  sig(nature) | enc(ryption), 

  |   "key_ops" : [      <·· OPT., preferred to "use". 
  |     "sign",              One or more of: ²
  |     "deriveKey"          · "sign"      · "verify" 
  |   ]                      · "encrypt"   · "decrypt" 
  |                          · "wrapKey"   · "unwrapKey" 
  |                          · "deriveKey" · "deriveBits" 
  |                          (other values MAY be used)
  |
  |   "alg"             <·· OPT. Algorithm intended for use 
  |                         with the key, with value registered
  |                         in JWA or custom collision-resistant name.
  |
  |                        // Custom (EC key-type) params 
  |   "crv":"P-256",       <·· Elliptic Curve P-256
  |   "x":"f83OJ3D2x...",  <·· URLEncoded x coor.
  |   "y":"x_FEzRu9m...",  <·· URLEncoded y coor.
  |                        // Custom (RSA key-type) params 
  |   "n": ... ,           <·· modulus
  |   "d": ... ,           <·· private exponent
  |   "e": ... ,           <·· exponent
  |                            WARN: some RSA private key representations do
  |                            not include "e" and must be avoided. Ex:
  |                            In Java prefer RSAPrivateCrtKeySpec to
  |                            RSAPrivateKeySpec API (missing "e")
  |   "d":"...",           <·· ???
  |   "p":"...",           <·· ???
  |   "q":"....",          <·· ???
  |   "dp":"...",          <·· ???
  |   "dq":"...",          <·· ???
  |   "qi":"...",          <·· ???
  |                        // Optional X.509 related info.
  |   "x5u"             <·· X.509 URL (TLS protected) 'pointing' to X.509
  |                         Pub.Key Cert.(o Cert-chain)  conforming to RFC5280 
  |                         PEM-encoded.
  |                         Duplicated information in JWK like "use", "key_ops", 
  |                         "alg" are still recommended for apps not handling 
  |                         X.509 Certs. Values must be consistent in JSON a X.509
  |   "x5c"             <·· Embedded X.509 Cert (or Cert-chain) as JSON array.
  |   "x5t"             <·· X.509 Certificate SHA-1   Thumbprint.
  |   "x5t#S256"        <·· X.509 Certificate SHA-256 Thumbprint.
  | }
  | ¹ values should either be registered in the IANA 
  |   "JSON Web Key Types" registry established by [JWA]
  |   or be a value that contains a Collision-Resistant Name.  
  | ² values intentionally match "KeyUsage" those defined 
  |   in <http://www.w3.org/TR/2014/CR-WebCryptoAPI-20141211/>.
  | ³ "use" and "key_ops" JWK members SHOULD NOT be used together
  |   or if forced, their values must be consistent.
  ```
* Example JWK Set:
  ```
  | {
  |    "keys": [ JWK1 , JWK2 , ] <·· Unordered list of JWK although 
  | }                                apps can interpret the order
  |                                  at will
  ```
* Encrypted JWK/JWT Set is done through a JWE with UTF-8 encoding
  of the JWK as its plaintext value. 
  * example JWE JOSE Protected Header Example:
    ```
    | (to be encoded as BASE64URL(UTF8(JWE Protected Header))
    | {
    |  "alg":"PBES2-HS256+A128KW",     <·· Content Encryp.Key encrypted to 
    |                                      recipient using PSE2-HS256+A128KW
    |                                      algorithm (output JWE Encrypted Key)
    |  "p2s":"2WCTcJZ1Rvd_CJuJripQ1w", <·· Salt Input 
    |  "p2c":4096,                     <·· Iteration Count
    |  "enc":"A128CBC-HS256",          <·· encrypt with AES_128_CBC_HMAC_SHA_256 alg.
    |                                      HMAC => Authenticated:
    |                                      - input:plaintext.
    |                                      - ouput:ciphertext+Authentication Tag
    |  "cty":"jwk+json"                <·· content type jwt+json or jwt-set+json
    | }
    ```
  * JWE Compact Serialization Complete Representation:
    ```
    |                       ¹: BASE64URL encoded
    |             ¹                      ¹                 ¹             ¹              ¹ 
    | ┌───────────┴────────────┐ ┌───────┴───────┐ ┌───────┴─────┐ ┌─────┴──────┐ ┌─────┴──────┐
    | UTF8(JWE Protected Header).JWE Encrypted Key.JWE Init Vector.JWE Ciphertext.JWE Authen.Tag
    ```
[[standards.JWK}]] 

## JSON Web Algorithms (JWA)  <!-- { -->
* REF: <https://tools.ietf.org/html/rfc7518>
* This specification registers cryptographic algorithms and identifiers
  to be used with the JSON Web Signature (JWS), JSON Web Encryption
  (JWE), and JSON Web Key (JWK) specifications.  It defines several
  IANA registries for these identifiers.
<!-- } -->

## JOSE: (J)SON (O)bject (S)igning and (E)ncryption <!-- { -->

* `JOSE "==" JWS + JWE + JWK + JWA`

* Following is a decoded JSON payload representing an example
 of JOSE protected header parameters as defined by the JWS JSON
 Serialization syntax.
 ```
 {
   "name": "identityKey",← extension 1
   "alg" : "ES256K",     ← ECDSA using secp256k1 curve + SHA-256
   "typ" : "JOSE+JSON",  ← media type of complete JWS
   "b64" : false,        ← extension 2
                           true ⇒ payload=ASCII(BASE64URL(JWS Payload))
   "crit": ["b64"],      ← Critical extensions that must be accepted
   "jwk" :  {            ← pub.key used to sign JOSE header+JWS payload.
     "kty": "EC",          represented as JSON Web Key
     "use": "sig",       ← Intended user
     "crv": "secp256k1",
     "x"  : "0",         ← X-coordinate of corresponding pub key.
     "y"  : "0",         ← Y-coordinate of the corresponding pub key.
   },
 }
 ```

### JOSE Implementations:
* REF: @[https://www.npmjs.com/package/node-jose]
* JS implementation of the JSON Object Signing and Encryption (JOSE)
  for current web browsers and node.js-based servers. This library implements
  (wherever possible) all algorithms, formats, and options in JWS, JWE, JWK, and
  JWA and uses native cryptographic support (WebCrypto API or node.js' "crypto"
  module) where feasible.<br/>
  Ex ussage:
  ```
  // Create Self Signed JSON token
  const  privKey01 = jose.JWK.asKey(
      "-----BEGIN PRIVATE KEY-----\n" +
      ...
      "-----END RSA PRIVATE KEY-----");
  const payload = { iss:"service1", aud:"service2" };
  const  JWT01 = jose.JWT.sign (payload, privKey01 , { expiresIn: "1 hours" });
  ```
<!-- } -->



